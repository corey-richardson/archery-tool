generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  defaultBowstyle Bowstyle?
  sex             Sex?
  gender          String?
  yearOfBirth     Int?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  archivedAt DateTime?

  accounts       Account[]
  sessions       Session[]
  memberOf       ClubMembership[]
  adminOf        ClubMembership[] @relation("ClubAdmins")
  iceDetails     IceDetails[]
  RecordsSummary RecordsSummary?
  Scores         Scores[]
}

model Club {
  id   String @id @default(cuid())
  name String @unique

  memberships ClubMembership[]
}

model ClubMembership {
  id     String @id @default(cuid())
  userId String
  clubId String

  roles     MembershipRole[]
  joinedAt DateTime       @default(now())
  endedAt  DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  admin       User?   @relation("ClubAdmins", fields: [adminUserId], references: [id])
  adminUserId String?

  @@unique([userId, clubId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model IceDetails {
  id               String           @id @default(cuid())
  userId           String
  contactName      String
  contactPhone     String
  contactEmail     String?
  relationshipType RelationshipType?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RecordsSummary {
  id                    String                  @id @default(cuid())
  userId                String                  @unique
  indoorClassification  IndoorClassification?
  outdoorClassification OutdoorClassification?
  indoorBadgeGiven      IndoorClassification?
  outdoorBadgeGiven     OutdoorClassification?
  indoorHandicap        Int?
  outdoorHandicap       Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Scores {
  id     String @id @default(cuid())
  userId String

  submittedAt DateTime  @default(now())
  processedAt DateTime?

  dateShot         DateTime
  roundName        String
  roundType        RoundType @default(INDOOR) // Indoor or Outdoor
  bowstyle         Bowstyle
  score            Int
  xs               Int?
  tens             Int?
  nines            Int?
  hits             Int?
  competitionLevel CompetitionLevel
  notes            String?

  roundIndoorClassification  IndoorClassification?
  roundOutdoorClassification OutdoorClassification?
  roundHandicap              Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MembershipRole {
  MEMBER
  COACH
  RECORDS
  ADMIN
}

enum Bowstyle {
  BAREBOW
  RECURVE
  COMPOUND
  LONGBOW
  TRADITIONAL
}

enum Sex {
  MALE
  FEMALE
}

enum RelationshipType {
  PARENT
  GUARDIAN
  SPOUSE
  SIBLING
  FRIEND
  OTHER
}

enum RoundType {
  INDOOR
  OUTDOOR
}

enum IndoorClassification {
  IA3
  IA2
  IA1
  IB3
  IB2
  IMB
  IGMB
}

enum OutdoorClassification {
  A3
  A2
  A1
  B3
  B2
  B1
  MB
  GMB
  EMB
}

enum CompetitionLevel {
  PRACTICE
  CLUB_EVENT
  OPEN_COMPETITION
  RECORDSTATUS_COMPETITION
}

// npx prisma migrate dev
// npx prisma generate
// npx prisma studio
// npx prisma format

/*
if (score.roundType === 'INDOOR' && score.roundOutdoorClassification) {
  throw new Error('Indoor rounds cannot have outdoor classifications');
}
*/
